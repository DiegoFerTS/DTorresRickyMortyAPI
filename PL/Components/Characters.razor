@using Newtonsoft.Json.Linq;
<h3>Personajes</h3>
<br />
<br />


<nav aria-label="Page navigation example">
    <ul class="pagination text-center">
        <li class="page-item"><button class="page-link" @onclick='() => Pagination("-")'>Anterior</button></li>
        <li class="page-item"><button class="page-link" @onclick='() => AsignarPagina(1)'>1</button></li>
        <li class="page-item"><button class="page-link" @onclick='() => AsignarPagina(2)'>2</button></li>
        <li class="page-item"><button class="page-link" @onclick='() => AsignarPagina(3)'>3</button></li>
        <li class="page-item"><button class="page-link" @onclick='() => Pagination("+")'>Siguiente</button></li>
    </ul>
</nav>


<br />


@if (Personaje.Personajes.Count > 0 || Personaje.Personajes != null)
{
    <input class="form-control" placeholder="Escribe el nombre de un personaje" @bind="Nombre" />
    <br />
    <button class="btn btn-primary">Buscar</button>

    <br />
    <br />

    <div class="row">
        @if (Nombre == "")
        {
            @foreach (dynamic personaje in Personaje.Personajes)
            {
                <div class="col-4" style="margin-bottom: 15px;">
                    <div class="card" style="width: 18rem;">
                        <img src="@personaje.Image" class="card-img-top" alt="...">
                        <div class="card-body">
                            <h5 class="card-title">@personaje.Name</h5>
                            <hr>
                            <p class="card-text">
                                Estatus: @personaje.Status
                                <br>
                                Especie: @personaje.Species
                                <br>
                                Tipo: @personaje.Type
                                <br>
                                Genero: @personaje.Gender
                                <br>
                                Planeta: @personaje.Origin.Name
                                <br>
                                Ubicacion: @personaje.Location.Name
                                <br>

                                <hr>
                                Creacion: @personaje.Created
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            @foreach (dynamic personaje in Personaje.Personajes)
            {
                @if (personaje.Name.ToString().ToLower().Contains(Nombre))
                {
                    <div class="col-4" style="margin-bottom: 15px;">
                        <div class="card" style="width: 18rem;">
                            <img src="@personaje.Image" class="card-img-top" alt="...">
                            <div class="card-body">
                                <h5 class="card-title">@personaje.Name</h5>
                                <hr>
                                <p class="card-text">
                                    Estatus: @personaje.Status
                                    <br>
                                    Especie: @personaje.Species
                                    <br>
                                    Tipo: @personaje.Type
                                    <br>
                                    Genero: @personaje.Gender
                                    <br>
                                    Planeta: @personaje.Origin.Name
                                    <br>
                                    Ubicacion: @personaje.Location.Name
                                    <br>

                                    <hr>
                                    Creacion: @personaje.Created
                                </p>
                            </div>
                        </div>
                    </div>
                }

            }
        }

    </div>
}
else
{
    <div class="alert alert-danger">No se encotraron datos.</div>
}

@code {
    [Parameter]
    public int Page { get; set; }

    public string Nombre { get; set; } = "";

    public int CountPagination { get; set; } = 1;

    private dynamic Personaje = new System.Dynamic.ExpandoObject();


    protected override void OnInitialized()
    {
        GetAll();

        base.OnInitialized();
    }

    private void GetAll(int? page = 1)
    {
        Personaje.Personajes = new List<dynamic>();

        try
        {
            using (var client = new HttpClient())
            {
                string pageView = "";

                client.BaseAddress = new Uri("https://rickandmortyapi.com/api/character");

                if (page == 1)
                {
                    pageView = "";
                }
                else
                {
                    pageView = "?page=" + page;
                }

                var requestTask = client.GetAsync(pageView);
                requestTask.Wait();

                var resultTask = requestTask.Result;

                if (resultTask.IsSuccessStatusCode)
                {

                    var readResult = resultTask.Content.ReadAsStringAsync();

                    dynamic jsonResult = JObject.Parse(readResult.Result.ToString());

                    readResult.Wait();

                    foreach (var character in jsonResult.results)
                    {
                        dynamic personajeResult = new System.Dynamic.ExpandoObject();
                        personajeResult.Origin = new System.Dynamic.ExpandoObject();
                        personajeResult.Location = new System.Dynamic.ExpandoObject();

                        personajeResult.Id = character.id;
                        personajeResult.Name = character.name;
                        personajeResult.Status = character.status;
                        personajeResult.Species = character.species;
                        personajeResult.Type = character.type;
                        personajeResult.Gender = character.gender;
                        personajeResult.Origin.Name = character.origin.name;
                        personajeResult.Location.Name = character.location.name;
                        personajeResult.Image = character.image;
                        personajeResult.Created = character.created;


                        Personaje.Personajes.Add(personajeResult);
                    }


                }

            }
        }
        catch (Exception ex)
        {
            Personaje.Mensaje = "Ocurrio un error: " + ex;
        }
    }


    private void Pagination(string simbol)
    {
        if (simbol == "+")
        {
            CountPagination += 1;
        }
        else if (simbol == "-")
        {
            if (CountPagination <= 1)
            {
                CountPagination = 1;
            }
            else
            {
                CountPagination -= 1;
            }
        }

        GetAll(CountPagination);
    }

    private void AsignarPagina(int numberPage)
    {
        CountPagination = numberPage;

        GetAll(CountPagination);

    }
}
